{"version":3,"file":"static/js/597.b36bc331.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/ContactsPage/ContactPage.module.css?d4ca","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = (state) => state.phonebook.contacts;\nexport const selectContactsFilter = (state) => state.filter.filter;\nexport const selectIsLoading = (state) => state.phonebook.isLoading;\nexport const selectError = (state) => state.phonebook.error;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"input_wrapper\":\"ContactForm_input_wrapper__U443b\"};","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contacts/api\";\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from \"redux/contacts/selectors\";\nimport { Button, TextField } from \"@mui/material\";\nimport style from './ContactForm.module.css'\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const existingContact = contacts.find(contact => contact.name === name);\n\n        if (existingContact) {\n            alert(\"Contact already exists\");\n        } else {\n            dispatch(addContact({ id: nanoid(), name, number }));\n            setName('');\n            setNumber('');\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className={style.input_wrapper}>\n                <TextField\n                    margin=\"normal\"\n                    required\n                    type=\"text\"\n                    label=\"Name\"\n                    onChange={e => setName(e.target.value)} />\n                <TextField\n                    margin=\"normal\"\n                    required\n                    type=\"tel\"\n                    label=\"Number\"\n                    onChange={e => setName(e.target.value)} />\n            </div>\n            <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n                Add Contact\n            </Button>\n    </form>\n    );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact, onDelete }) => {\n    return (\n        <li>\n            {contact.name}: {contact.number}\n            <button className=\"delete_btn\" onClick={() => onDelete(contact.id)}>Delete</button>\n        </li>\n)}\n\nContactItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n    onDelete: PropTypes.func,\n}\n\nexport default ContactItem;\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContactItem from '../ContactItem/ContactItem';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/api';\nimport { selectContacts, selectContactsFilter } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = useCallback(\n    (contactId) => {\n      dispatch(deleteContact(contactId));\n    },\n    [dispatch]\n  );\n\n  const filteredContacts = contacts.filter(contact => contact.name.toLowerCase().includes(filter));\n  return (\n    <ol>\n      {filteredContacts.map((contact) => (\n        <ContactItem key={contact.id} contact={contact} onDelete={handleDeleteContact} />\n      ))}\n    </ol>\n  );\n};\n\nContactList.propTypes = {\n  onDelete: PropTypes.func,\n};\n\nexport default ContactList;\n","import { TextField } from \"@mui/material\";\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { setFilter } from \"redux/contacts/filterReducer\";\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n      dispatch(setFilter(e.target.value));\n    };\n\n  return (\n    <div>\n      <TextField\n        margin=\"normal\"\n        fullWidth\n        id=\"query\"\n        label=\"Search name\"\n        name=\"name\"\n        autoComplete=\"name\"\n        autoFocus\n        onChange={handleFilterChange}\n      />\n    </div>\n    );\n};\n\nexport default Filter;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactPage_container__2go0r\",\"phonebook_title\":\"ContactPage_phonebook_title__Bh77G\"};","import React, {useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from 'redux/contacts/api';\nimport { selectError, selectIsLoading } from \"redux/contacts/selectors\";\nimport Loader from 'components/Loader/Loader';\nimport style from './ContactPage.module.css'\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={style.container}>\n        <h1 className={style.phonebook_title}>Phonebook</h1>\n        <ContactForm />\n        <h2 className={style.phonebook_title}>Contact List</h2>\n        <Filter />\n        {isLoading && <Loader/>}\n        {error && <p className=\"error\">{error}</p>}\n        {!isLoading && !error && <ContactList />}\n    </div>\n  )\n}\n\nexport default ContactsPage"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","phonebook","contacts","selectContactsFilter","filter","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","useState","name","setName","number","setNumber","useSelector","onSubmit","e","preventDefault","find","contact","alert","addContact","className","style","TextField","margin","required","type","label","onChange","target","value","Button","fullWidth","variant","sx","mt","mb","onDelete","onClick","handleDeleteContact","useCallback","contactId","deleteContact","filteredContacts","toLowerCase","includes","map","autoComplete","autoFocus","setFilter","useEffect","fetchContacts","Loader"],"sourceRoot":""}