{"version":3,"file":"static/js/314.b60a4714.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = (state) => state.phonebook.contacts.items;\nexport const selectContactsFilter = (state) => state.filter.filter;\nexport const selectIsLoading = (state) => state.phonebook.contacts.isLoading;\nexport const selectError = (state) => state.phonebook.contacts.error;\n\nexport const selectFilteredContacts = (state) => {\n  const contacts = selectContacts(state);\n  const filter = selectContactsFilter(state);\n  return contacts.filter((contact) => contact.name.toLowerCase().includes(filter));\n};\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"redux/contacts/api\";\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from \"redux/contacts/selectors\";\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector(selectContacts);\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const existingContact = contacts.find(contact => contact.name === name);\n\n        if (existingContact) {\n            alert(\"Contact already exists\");\n        } else {\n            dispatch(addContact({ id: nanoid(), name, number }));\n            setName('');\n            setNumber('');\n        }\n    };\n\n    return (\n        <form\n            className=\"submit_form\"\n            onSubmit={handleSubmit}>\n            <label className=\"label\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Name\"\n                    value={name}\n                    onChange={e => setName(e.target.value)}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </label>\n            <label className=\"label\">\n                <input\n                    type=\"tel\"\n                    placeholder=\"Number\"\n                    value={number}\n                    onChange={e => setNumber(e.target.value)}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </label>\n            <button type=\"submit\" className=\"submit_btn\">Add Contact</button>\n        </form>\n    );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst ContactItem = ({ contact, onDelete }) => {\n    return (\n        <li>\n            {contact.name}: {contact.number}\n            <button className=\"delete_btn\" onClick={() => onDelete(contact.id)}>Delete</button>\n        </li>\n)}\n\nContactItem.propTypes = {\n    contact: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    }).isRequired,\n    onDelete: PropTypes.func,\n}\n\nexport default ContactItem;\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport ContactItem from '../ContactItem/ContactItem';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/api';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = useCallback(\n    (contactId) => {\n      dispatch(deleteContact(contactId));\n    },\n    [dispatch]\n  );\n\n  return (\n    <ul>\n      {contacts.map((contact) => (\n        <ContactItem key={contact.id} contact={contact} onDelete={handleDeleteContact} />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  onDelete: PropTypes.func,\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setFilter } from \"redux/contacts/filterReducer\";\nimport { selectContactsFilter } from \"redux/contacts/selectors\"\n\nconst Filter = () => {\n  const filter = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = e => {\n      dispatch(setFilter(e.target.value));\n    };\n\n  return (\n    <div>\n      <label className=\"label\">Filter contacts:\n        <input type=\"text\" value={filter} onChange={handleFilterChange} />\n      </label>\n    </div>\n    );\n};\n\nexport default Filter;\n\n","import React, {useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchContacts } from 'redux/contacts/api';\nimport { selectError, selectIsLoading } from \"redux/contacts/selectors\";\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && <p>Loading...</p>}\n      {error && <p className=\"error\">{error}</p>}\n      {!isLoading && !error && <ContactList />}\n    </div>\n  )\n}\n\nexport default ContactsPage"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","phonebook","contacts","items","selectContactsFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","contact","name","toLowerCase","includes","dispatch","useDispatch","useState","setName","number","setNumber","useSelector","className","onSubmit","e","preventDefault","find","alert","addContact","type","placeholder","value","onChange","target","pattern","title","required","onDelete","onClick","handleDeleteContact","useCallback","contactId","deleteContact","map","setFilter","useEffect","fetchContacts"],"sourceRoot":""}